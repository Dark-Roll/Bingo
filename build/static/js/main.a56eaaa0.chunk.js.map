{"version":3,"sources":["components/WinPopUp.js","components/BingoBlock.js","reducers/resultReducer.js","sagas/resultSaga.js","constants/actionTypes.js","store.js","actions/resultAction.js","components/App.js","serviceWorker.js","index.js"],"names":["WinPopUp","props","className","result","win","lose","onClick","handleRestartClick","BingoBlock","grid","handleNumberClick","circle","map","sameXArr","i","key","style","zoom","e","parseInt","value","initialState","message","watchRecordResult","recordResult","resultSaga","takeEvery","action","put","type","data","payload","error","all","sagaMiddleware","createSagaMiddleware","store","createStore","state","applyMiddleware","run","rootSaga","boundRecordResult","bindActionCreators","dispatch","App","useState","setGrid","setCircle","isWin","setIsWin","searchValue","setSearchValue","useSelector","useEffect","initializeCircle","initializeGrid","filter","length","computeLine","arr","index","intArr","resultArr","console","log","createRandomArray","randomArr","gridArr","nthRow","push","randomNum","Math","floor","random","splice","rowLine","columnLine","slashLine","x","y","includesZero","showWin","setCircleIndexTrue","newArr","slice","onChange","target","placeholder","alert","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a56eaaa0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction WinPopUp(props) {\r\n\r\n    return (\r\n        <div className=\"victory__container\">\r\n            <div className=\"victory__main\">\r\n                <p className=\"victory__title\"> You win </p>\r\n                <p> Win: {props.result && props.result.win} </p>\r\n                <p> Lose: {props.result && props.result.lose} </p> \r\n                \r\n                <button onClick={props.handleRestartClick}>Restart</button>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WinPopUp","import React from \"react\";\r\n\r\nfunction BingoBlock(props) {\r\n\r\n    let grid = props.grid\r\n    let handleNumberClick = props.handleNumberClick\r\n    let circle = props.circle\r\n\r\n    return (\r\n        <>\r\n            {\r\n                grid.map( (sameXArr, i) => <div key={i} style={{zoom: 2}}>\r\n                    {\r\n                        sameXArr.map((e, i) => <button\r\n                            className={circle[parseInt(e) - 1] === 1 ? 'circled bingoblock' : 'bingoblock'}\r\n                            value={e}\r\n                            onClick={handleNumberClick}\r\n                            key={i}\r\n                        >\r\n                            {e}\r\n                        </button>)\r\n                    }\r\n                </div>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BingoBlock","const initialState = {\r\n    result:{win: 0, lose:0},\r\n    message: '',\r\n};\r\n\r\nexport default function resultReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase 'RECORD_RESULT_SUCCESS': {\r\n\t\t\treturn {\r\n                ...state,\r\n\t\t\t\tresult: action.data\r\n            }\r\n\t\t}\r\n\t\tcase 'RECORD_RESULT_ERROR':{\r\n\t\t\treturn {\r\n                ...state,\r\n\t\t\t\terror: action.error\r\n\t\t\t}\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import {\r\n    put,\r\n    takeEvery,\r\n    all\r\n} from 'redux-saga/effects'\r\n\r\nimport { \r\n    RECORD_RESULT,\r\n    RECORD_RESULT_SUCCESS,\r\n    RECORD_RESULT_ERROR,\r\n} from '../constants/actionTypes';\r\n\r\nfunction* watchRecordResult() {\r\n    yield takeEvery(RECORD_RESULT, recordResult)\r\n}\r\n\r\nfunction* recordResult(action) {\r\n    try {\r\n\r\n        yield put({ type: RECORD_RESULT_SUCCESS, data: action.payload})\r\n\r\n    } catch (error) {\r\n        yield put({ type: RECORD_RESULT_ERROR, error })\r\n    }\r\n}\r\n\r\n\r\nexport default function* resultSaga() {\r\n    yield all([\r\n        watchRecordResult()\r\n    ])\r\n}","export const RECORD_RESULT = \"RECORD_RESULT\"\r\nexport const RECORD_RESULT_SUCCESS = \"RECORD_RESULT_SUCCESS\"\r\nexport const RECORD_RESULT_ERROR = \"RECORD_RESULT_ERROR\"","import {\r\n    createStore,\r\n    applyMiddleware\r\n} from 'redux'\r\n\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport rootReducer from './reducers/resultReducer'\r\nimport rootSaga from './sagas/resultSaga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(sagaMiddleware)\r\n)\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\nexport default store","import { bindActionCreators } from 'redux';\r\nimport store from '../store';\r\n\r\nimport {\r\n    RECORD_RESULT,\r\n} from '../constants/actionTypes';\r\n\r\nconst recordResult = payload => {\r\n    return{\r\n        type: RECORD_RESULT,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const boundRecordResult = bindActionCreators(recordResult, store.dispatch)\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport WinPopUp from './WinPopUp';\r\nimport BingoBlock from './BingoBlock';\r\nimport './App.css';\r\nimport { boundRecordResult } from '../actions/resultAction';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nfunction App() {\r\n\tconst [grid, setGrid] = useState([[]])\r\n\tconst [circle, setCircle] = useState([])\r\n\tconst [isWin, setIsWin] = useState(false)\r\n\tconst [searchValue, setSearchValue] = useState(0)\r\n\r\n\tconst result = useSelector(state => state.result);\r\n\r\n\t// intialize\r\n\tuseEffect(()=>{\r\n\t\tinitializeCircle()\r\n\t\tinitializeGrid()\r\n\t}, [])\r\n\r\n\t// compute if user win\r\n\tuseEffect(()=>{\t\t\r\n\t\tlet circledArr = circle && circle.filter(e=> e === 1)\r\n\r\n\t\t// there is no 3 lines when circled is less than 9 \r\n\t\tif( circledArr.length >= 9 ){\r\n\t\t\tcomputeLine()\r\n\t\t}\r\n\t}, [circle])\r\n\r\n\tconst length = 4\r\n\tconst lengthPow = length * length\r\n\tconst howManyLineIsWin = 3\r\n\r\n\tconst initializeCircle = ()=>{\r\n\t\tlet arr = []\r\n\t\tfor (let index = 0; index < lengthPow; index++) {\r\n\t\t\tarr[index] = 0\r\n\t\t}\r\n\t\tsetCircle(arr)\r\n\t}\r\n\r\n\tconst initializeGrid = ()=>{\r\n\t\tlet intArr =[]\r\n\t\tlet resultArr = []\r\n\t\tfor (let index = 0; index < lengthPow; index++) {\r\n\t\t\tintArr[index] = index +1\r\n\t\t}\r\n\r\n\t\tconsole.log( createRandomArray(intArr, resultArr) )\r\n\t\tconsole.log( createRandomArray(intArr, resultArr) )\r\n\t\tlet randomArr = createRandomArray(intArr, resultArr)\r\n\r\n\t\tlet gridArr = []\r\n\t\tlet nthRow = 0\r\n\t\tfor (let index = 0; index < lengthPow; index++) {\r\n\t\t\t// fills one x with y of length\r\n\t\t\tif(index % length ===0 ){\r\n\t\t\t\tif(index !== 0){\r\n\t\t\t\t\t++nthRow\r\n\t\t\t\t}\r\n\t\t\t\tgridArr.push([randomArr[index]])\r\n\t\t\t} else{\r\n\t\t\t\tgridArr[nthRow].push(randomArr[index])\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tsetGrid(gridArr)\r\n\t}\r\n\r\n\tconst createRandomArray = (intArr, resultArr= [])=>{\r\n\r\n\t\tlet randomNum = Math.floor(Math.random() * 100 % intArr.length)\r\n\t\tresultArr.push(intArr[randomNum])\r\n\t\tintArr.splice(randomNum, 1)\r\n\t\r\n\t\tconsole.log(intArr);\r\n\t\t\r\n\t\tif(intArr.length > 0){\r\n\t\t\tcreateRandomArray(intArr, resultArr)\r\n\t\t\tconsole.log(\"length > 0, intArr is:\", intArr);\r\n\t\t} else{\r\n\t\t\tconsole.log(\"length =< 0, intArr is:\", intArr);\r\n\t\t\treturn resultArr\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst computeLine = ()=>{\r\n\t\t\r\n\t\tlet rowLine = 0\r\n\t\tlet columnLine = 0\r\n\t\tlet slashLine = 0\r\n\r\n\t\t// calculate row line\r\n\t\tfor (let x = 0; x < length; x++) {\r\n\t\t\t\r\n\t\t\tlet ColumnArr = grid[x].filter(e=> circle[e-1] === 0 )\r\n\t\t\t// or grid[x].includes(0) === false, line++\r\n\r\n\t\t\tif(ColumnArr.length === 0){\r\n\t\t\t\t++columnLine\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\tconsole.log(columnLine);\r\n\r\n\t\t// calculate row line\r\n\t\tfor (let y = 0; y < length; y++) {\r\n\t\t\tlet includesZero = false\r\n\r\n\t\t\tfor (let x = 0; x < length; x++) {\r\n\t\t\t\tif (circle[grid[x][y]-1] === 0 ){\r\n\t\t\t\t\tincludesZero = true\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif(includesZero === false){\r\n\t\t\t\t++rowLine\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(rowLine);\r\n\r\n\t\t// calculate slash line\r\n\t\tlet includesZero = false\r\n\t\tfor (let x = 0; x < length; x++) {\r\n\t\t\tif(circle[grid[x][x]-1] === 0 ){\r\n\t\t\t\tincludesZero = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tif( includesZero === false ){\r\n\t\t\t++slashLine\r\n\t\t}\r\n\t\tconsole.log(slashLine);\r\n\r\n\r\n\t\t// calculate backslash line\r\n\t\tincludesZero = false\r\n\t\tfor (let x = 0; x < length; x++) {\r\n\t\t\t// length has to substract 1\r\n\t\t\tif(circle[grid[x][length - x -1]-1] === 0 ){\r\n\t\t\t\tincludesZero = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tif( includesZero === false ){\r\n\t\t\t++slashLine\r\n\t\t}\r\n\t\tconsole.log(slashLine);\r\n\r\n\t\tif( rowLine + columnLine + slashLine >= howManyLineIsWin){\r\n\t\t\tshowWin()\r\n\t\t}\r\n\t}\r\n\r\n\tconst showWin = ()=>{\r\n\t\tboundRecordResult({\r\n\t\t\t...result,\r\n\t\t\twin: ++result.win\r\n\t\t})\r\n\t\tsetIsWin(true)\r\n\t}\r\n\r\n\tconst handleNumberClick = e =>{\r\n\t\tsetCircleIndexTrue( parseInt(e.target.value) -1 )\r\n\t}\r\n\r\n\tconst handleInputChange = e =>{\r\n\t\tsetSearchValue(e.target.value)\r\n\t}\r\n\r\n\tconst handleSearchClick = ()=>{\r\n\t\tif(searchValue > 0 && searchValue <= lengthPow){\t\t\t\r\n\t\t\tsetCircleIndexTrue( searchValue -1 )\r\n\t\t} else {\r\n\t\t\talert( '請確認輸入數字是否正確')\r\n\t\t}\r\n\t}\r\n\r\n\tconst setCircleIndexTrue = index => {\r\n\t\tlet newArr = [ ...circle.slice(0, index), 1, ...circle.slice(index+1) ]\r\n\t\tsetCircle(newArr)\r\n\t}\r\n\r\n\t// Example: grid = [ [1,1,0,0], [0,0,1,1], [], [] ]\r\n\t// grid[2] 會顯示當 x 是 2 的時候，y 的資料\r\n\t// grid[2][1] 會顯示當 x 是 2，y 是 1 的時候的資料\r\n\r\n\tconst handleRestartClick =()=>{\r\n\t\tsetIsWin(false)\r\n\t\tsetSearchValue(0)\r\n\r\n\t\tinitializeCircle()\r\n\t\tinitializeGrid()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"bingo__container\">\r\n\t\t\t<div className=\"bingo__main\">\r\n\t\t\t\t<h1> 賓果遊戲 </h1>\r\n\t\t\t\t<div className=\"search__main\">\r\n\t\t\t\t\t<input className=\"search__input\" type=\"number\" value={searchValue} onChange={handleInputChange} placeholder={`輸入數字 1~${length*length} 以直接圈選`} />\r\n\t\t\t\t\t<button className=\"search__button\" onClick={handleSearchClick}>圈選 </button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\tgrid[1] && <BingoBlock \r\n\t\t\t\t\t\tgrid = {grid}\r\n\t\t\t\t\t\thandleNumberClick = {handleNumberClick}\r\n\t\t\t\t\t\tcircle= {circle}\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t{\r\n\t\t\t\tisWin && <WinPopUp handleRestartClick = {handleRestartClick} result={result}/>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <App />\r\n</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}